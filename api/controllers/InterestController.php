<?php

namespace api\controllers;

use common\models\Common;
use common\models\InterestCardModel;
use common\models\InterestModel;
use common\models\InterestNotifyLogModel;
use common\models\InterestPayserialModel;
use common\models\InterestTypeModel;
use yii\filters\auth\CompositeAuth;
use yii\filters\auth\HttpBearerAuth;
use yii\filters\auth\QueryParamAuth;

/**
 * CityController implements the CRUD actions for CityModel model.
 */
class InterestController extends CommonController
{
    public $modelClass = "";
    // development
    private static $partnerNo = 'YTec7e9b481998e866';
    private static $secretKey = '50a01efca8f62587';
    private static $apiBaseUrl = 'https://api-test.yhouse.com';
    private static $loginBaseUrl = 'https://m-test.yhouse.com';
    private static $buyRedirectUrl = 'https://m-test.yhouse.com/m/lianyun/sshua/payment.html?pk_campaign=sshua&pk_kwd=material1';
    private static $useRedirectUrl = 'https://m-test.yhouse.com/m/ypass-list/build/#/';

    // production
//    private static $partnerNo = 'YPcee13fbb15921eb1';
//    private static $secretKey = '8255c6716704cbd0';
//    private static $apiBaseUrl = 'https://api.yhouse.com';
//    private static $loginBaseUrl = 'https://m.yhouse.com';
//    private static $buyRedirectUrl = 'https://m.yhouse.com/m/lianyun/sshua/payment.html';
//    private static $useRedirectUrl = 'http://m.yhouse.com/m/ypass-list/build/#/';


    private static $mobileSign = 12345678912;

    public function behaviors()
    {
        $behaviors = parent::behaviors();
        $behaviors['authenticator'] = [
            'class' => CompositeAuth::className(),
            'authMethods' => [
                HttpBearerAuth::className(),
                QueryParamAuth::className(),
            ],
            'except' => ['index','notify']
        ];
        return $behaviors;
    }

    public function init()
    {
        if ('prod' == YII_ENV) {
            self::$partnerNo = 'YPcee13fbb15921eb1';
            self::$secretKey = '8255c6716704cbd0';
            self::$apiBaseUrl = 'https://api.yhouse.com';
            self::$loginBaseUrl = 'https://m.yhouse.com';
//            self::$buyRedirectUrl = 'https://m.yhouse.com/m/lianyun/sshua/payment.html';
            self::$buyRedirectUrl = 'https://m.yhouse.com/m/lianyun/sshua/payment.html?pk_campaign=sshua&pk_kwd=material1';
            self::$useRedirectUrl = 'http://m.yhouse.com/m/ypass-list/build/#/';
        }

        parent::init(); // TODO: Change the autogenerated stub
    }

    public function actions()
    {
        $actions = parent::actions();
        unset($actions['delete'], $actions['create'], $actions['update'], $actions['index'],$actions['view']);
        return $actions;
    }

    /**
     * Lists all CityModel models.
     * @return mixed
     */
    public function actionIndex()
    {
        $card_list = InterestCardModel::find()
            ->where(['status'=>1])
            ->asArray()
            ->all();

        $type_list = InterestTypeModel::find()
            ->asArray()
            ->all();

        $interest_list = [];
        foreach ($type_list as $value) {
            $interests = InterestModel::find()
                ->select('id,name,pic')
                ->where(['t_id' => $value['id']])
                ->asArray()
                ->all();

            $interest_list[] = [
                'type_name' => $value['name'],
                'type_desc' => $value['description'],
                'interests' => $interests
            ];
        }
//        Bought
        $response = [
            'cards' => $card_list,
            'interests' => $interest_list
        ];

        return $response;
    }

    public function actionInfo()
    {
        $type_list = InterestTypeModel::find()
            ->where(['info_view' => 1])
            ->asArray()
            ->all();

        return Common::response(1, 'Success', $type_list);
    }

    public function actionMy()
    {
        $user_info = parent::getUserInfo();
        $time = date('Y-m-d H:i:s');

        $list = InterestPayserialModel::find()
            ->select('id,user_id,card_id,days,create_time,finish_time,')
            ->where(['user_id' => $user_info['id']])
            ->andWhere(['>=', 'finish_time', $time])
            ->asArray()
            ->all();

        foreach ($list as $key => $value) {
            $card_info = InterestCardModel::find()
                ->select('name,now_price,pre_price,pic')
                ->where(['id' => $value['card_id']])
                ->asArray()
                ->one();

            $list[$key]['card_name'] = $card_info['name'];
            $list[$key]['card_price'] = $card_info['now_price'];
            $list[$key]['card_pic'] = $card_info['pic'];
            $list[$key]['pre_price'] = $card_info['pre_price'];
            $list[$key]['finish_time'] = date('Y-m-d', strtotime($value['finish_time']));
            $list[$key]['remain_days'] = intval((strtotime($value['finish_time']) - time()) / 86400);

            switch ($card_info['name']) {
                case '群青会员' :
                    $list[$key]['card_pic'] = 'https://xijin.oss-cn-shanghai.aliyuncs.com/banner/images2020-01-20/1585213451.png';
                    break;
                case '蓝金会员' :
                    $list[$key]['card_pic'] = 'https://xijin.oss-cn-shanghai.aliyuncs.com/banner/images2020-01-20/1585213462.png';
                    break;
                case '黑金会员' :
                    $list[$key]['card_pic'] = 'https://xijin.oss-cn-shanghai.aliyuncs.com/banner/images2020-01-20/1585213469.png';
                    break;
            }
        }

        return Common::response(1, 'Success', $list);
    }

    public function actionBuy()
    {
        $card_id = $this->get('card_id');
        if($card_id){
            switch ($card_id){
                case 1: // 月卡
                    self::$buyRedirectUrl .= "&good_id=2";
                    break;
                case 2: // 季卡
                    self::$buyRedirectUrl .= "&good_id=1";
                    break;
                case 3: // 年卡
                    self::$buyRedirectUrl .= "&good_id=0";
                    break;
                default:
                    return Common::response(0, '购买失败');
            }
        }else{
            return Common::response(0, '购买失败', ['url' => '']);
        }

        $timestamp = self::getMicrotime();
        $user_info = parent::getUserInfo();

        $params = [
            'timestamp' => intval($timestamp),
            'partnerNo' => self::$partnerNo,
            'uid' => $user_info['id'],
            'mobile' => intval($user_info['mobile'] + self::$mobileSign),
            'name' => $user_info['nick_name']
        ];

        $sign = self::getSignContent($params);
        $params['sign'] = $sign;

        $url = self::$apiBaseUrl . '/m/external/getToken';
        $response = self::myPost($url, json_encode($params));

        $decode_response = json_decode($response, true);

        if ("0" === $decode_response['code']) {
            $url = self::$loginBaseUrl . '/m/joint-login?token=' . $decode_response['data']['token'] . '&redirectUrl=' . urlencode(self::$buyRedirectUrl);
            return Common::response(1, $decode_response['message'], ['url' => $url]);
        } else {
            return Common::response(0, $decode_response['message'] ?: '购买失败', ['url' => '']);
        }
    }

    public function actionUse()
    {
        $timestamp = self::getMicrotime();
        $user_info = parent::getUserInfo();

        $params = [
            'timestamp' => intval($timestamp),
            'partnerNo' => self::$partnerNo,
            'uid' => $user_info['id'],
            'mobile' => intval($user_info['mobile'] + self::$mobileSign),
            'name' => $user_info['nick_name']
        ];

        $sign = self::getSignContent($params);
        $params['sign'] = $sign;

        $url = self::$apiBaseUrl . '/m/external/getToken';
        $response = self::myPost($url, json_encode($params));
        $decode_response = json_decode($response, true);

        if ("0" === $decode_response['code']) {
            $url = self::$loginBaseUrl . '/m/joint-login?token=' . $decode_response['data']['token'] . '&redirectUrl=' . urlencode(self::$useRedirectUrl);
            return Common::response(1, $decode_response['message'], ['url' => $url]);
        } else {
            return Common::response(0, $decode_response['message'], ['url' => '']);
        }
    }

    public function actionNotify()
    {
        $post = $this->post();
        !$post && die(json_encode(['code' => 1, 'message' => '参数信息错误', 'detail' => 'post is null', 'data' => null]));

        $InterestNotifyLogModel = new InterestNotifyLogModel();
        $InterestNotifyLogModel->setAttribute('content', json_encode($post));
        $InterestNotifyLogModel->save();

        $sign = $post['sign'];
        unset($post['sign']);
        $sign != self::getSignContent($post) && die(json_encode(['code' => 2, 'message' => '签名信息错误', 'detail' => 'sign error', 'data' => null]));
        InterestPayserialModel::findOne(['y_order_number' => $post['orderNumber']]) && die(json_encode(['code' => 3, 'message' => '订单已存在', 'detail' => 'order exists', 'data' => null]));

        $card_info = InterestCardModel::find()
            ->select('id,days')
            ->where(['y_sku_id' => $post['skuId']])
            ->asArray()
            ->one();

        $InterestPayserialModel = new InterestPayserialModel();
        $InterestPayserialModel->setAttributes([
            'user_id' => $post['uid'],
            'card_id' => $card_info['id'],
            'days' => $card_info['days'],
            'y_user_id' => $post['yid'],
            'y_order_number' => $post['orderNumber'],
            'status' => 1,
            'finish_time' => date('Y-m-d H:i:s', strtotime("+$card_info[days]days"))
        ]);

        if ($InterestPayserialModel->save()) {
            $InterestNotifyLogModel->setAttribute('status', 1);
            $InterestNotifyLogModel->save();

            die(json_encode(['code' => 0, 'message' => 'success', 'detail' => '', 'data' => ['serialNumber' => $InterestPayserialModel->id]]));
        } else {
            die(json_encode(['code' => 3, 'message' => 'Faild', 'detail' => 'save error', 'data' => $InterestPayserialModel->errors]));
        }
    }

    private static function myPost($url, $post_data = '', $timeout = 5)
    {
        $ch = curl_init();
        curl_setopt ($ch, CURLOPT_URL, $url);
        curl_setopt ($ch, CURLOPT_POST, 1);
        curl_setopt($ch, CURLOPT_HEADER, false);
        curl_setopt ($ch, CURLOPT_POSTFIELDS, $post_data);
        curl_setopt ($ch, CURLOPT_RETURNTRANSFER, 1);
        curl_setopt ($ch, CURLOPT_CONNECTTIMEOUT, $timeout);
        curl_setopt ($ch, CURLOPT_HTTPHEADER, array("Content-type: application/json"));
        $file_contents = curl_exec($ch);
        curl_close($ch);
        return $file_contents;
    }

    private static function getMicrotime()
    {
        list($msec, $sec) = explode(' ', microtime());
        $msectime = (float)sprintf('%.0f', (floatval($msec) + floatval($sec)) * 1000);
        return $msectime;
    }

    public static function getSignContent($params)
    {
        ksort($params);
        $stringToBeSigned = "";
        $i = 0;
        foreach ($params as $k => $v) {
            // 转换成目标字符集
            $v = self::characet($v, "UTF-8");

            if ($i == 0) {
                $stringToBeSigned .= "$k" . "=" . "$v";
            } else {
                $stringToBeSigned .= "&" . "$k" . "=" . "$v";
            }
            $i++;
        }
        unset ($k, $v);

        $sign = strtoupper(md5($stringToBeSigned . self::$secretKey));
        return $sign;
    }

    /**
     * 校验$value是否非空
     *  if not set ,return true;
     *    if is null , return true;
     **/
    private static function checkEmpty($value)
    {
        if (!isset($value))
            return true;
        if ($value === null)
            return true;
        if (trim($value) === "")
            return true;

        return false;
    }

    /**
     * 转换字符集编码
     * @param $data
     * @param $targetCharset
     * @return string
     */
    public static function characet($data, $targetCharset) {

        if (!empty($data)) {
            $fileType = "UTF-8";
            if (strcasecmp($fileType, $targetCharset) != 0) {
                $data = mb_convert_encoding($data, $targetCharset, $fileType);
            }
        }

        return $data;
    }

}
